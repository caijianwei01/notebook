1、安装后的配置
git config --global user.name "You Name"
git config --global user.email "email@example.com"
git config 命令的--global参数，表示这台机器上所有的Git仓库都会使用这个配置，
当然也可以对某个仓库指定不同的用户名和Email地址

2、创建版本库(又名仓库，repository，也叫工作区)
	a、首先在合适的位置创建一个目录，例如：D:\learngit
	b、通过git init命令把这个目录变成Git可以管理的仓库
	在这个目录下鼠标右键，选择Git Bash Here开启git命令窗口，输入git init。成功后目录下多了一个.git的文件，该文件就是Git仓库，不可修改该文件，会破坏Git仓库。
	工作区learngit中的隐藏目录.git是Git的版本库，而不是工作区

3、把文件添加到Git仓库，分两步。注意该文件必须在learngit目录下
	a、git add <filename>: 将文件添加到仓库。注意，可反复多次使用，添加多个文件，然后一起提交。
		该命令实际上是把工作区的文件添加到暂存区
	例如：git add file1 file2 file3
		  git commit -m 'add 3 files'
	b、git commit -m <message>: 将文件提交到仓库。-m后面输入的是本次提交的说明。
		该命令实际上是把暂存区的所有内容提交到当前分支。
	
	
git status: 查看工作区状态，使用工作区的文件和已经提交的文件进行对比

git diff:查看修改的内容,工作区的文件和版本库里分支文件的不同

git log: 显示从最近到最远的提交日志(详细信息)，查看提交历史
git log --pretty=oneline: 加上--pretty=oneline参数，则显示简单的信息
git reflog: 显示所有提交版本的信息，查看命令历史。从新到旧


版本回退：
方法一：通过使用HEAD指定版本回退
HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本
git reset --hard HEAD^: 回退到上个版本
cat <filename>: 查看回退版本文件的内容
方法二：通过commit id 指定id回退指定的版本
git reset --hard commit_id: 回退到指定的版本


管理修改：
Git跟踪并管理的是修改，而非文件。
git diff HEAD -- readme.txt: 查看工作区和版本库里面最新版的区别

撤销修改：
场景1：改乱了工作区某个文件的内容，想直接丢弃工作区的修改时
git checkout -- <filename>: 让工作区文件回到最近一次git commit或git add时的状态，丢弃工作区的修改。
场景2：改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改
第一步，git reset HEAD <file>：将暂存区的修改回退到工作区
第二步，执行场景一操作
参加3： 已经提交了不合适的修改到版本库时，想要撤销本次提交。
可以使用版本回退，前提是没有推送到远程库。

删除操作
在Git中，删除也是一个修改操作。
rm <file>: 删除工作区中的某个文件.执行命令git status会显示哪个文件被删除了
1、如果要从版本库中删除该文件
git rm <file>: 删除文件
git commit -m 'xxx': 提交删除命令
2、删错文件，删错了，恢复误删的文件到最新版
git checkout -- <file>:用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以‘一键还原’
小结：命令git rm 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删。
如果文件只是提交到暂存区，而未commmit。则恢复文件，会丢失当前修改。




远程仓库
第一步：创建SSH Key
ssh-keygen -t rsa -C 'youremail@example.com'
一路回车保持默认配置就好。
创建完成后，在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub,这两个就是SSH Key的密钥对。
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登录GitHub，添加SSH Key ，填上Title， 在key文本框里粘贴id_rsa.pub



添加远程仓库
1、git remote add origin git@github.com:caijianwei01/learngit.git:本地仓库关联远程仓库
caijianwei01:是GitHub账户名
origin:远程仓库的名称，Git默认的叫法
2、本地库的所有内容推送到远程仓库上
第一次推送：
git push -u origin master: 本地库master分支的所有内容推送到远程仓库
由于远程库是空的，我们第一次推送master分支时，加上了-u参数。
Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来
以后的推送或者拉取时就可以简化命令。
第二次推送：
git push origin master
如果报远程仓库和本地仓库冲突时
先合并冲突：git pull --rebase origin master，在执行推送


从远程库克隆
git clone git@github.com:caijianwei01/learngit.git
caijainwei01:远程仓库地址
learngit.git:需要克隆的远程仓库
Git支持多种协议，包括https,但通过ssh支持的原生git协议速度最快。



创建与合并分支
分支指向最新提交，HEAD指向当前分支
1、git checkout -b dev: 创建dev分支，-b参数表示创建并切换
相当于：git branch dev(创建分支dev),git checkout dev(切换分支dev)
2、git branch:查看所有分支，当前分支前面会标一个*
git merge dev:合并指定分支到当前分支，dev分支名
Fast-forward：快进模式，也就是直接把master指向dev的当前提交，所以合并速度非常快
3、git branch -d dev: 删除dev分支
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和master分支上工作效果是一样的，但过程更安全。


解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，在提交，合并完成。
解决冲突就是把合并失败的文件手动编辑为我们希望的内容，再提交。
git log --graph --pretty=oneline --abbrev-commit:查看分支合并图


分支管理策略
Fast forward 模式：Git的合并模式，删除分支后，会丢失分支信息
git merge dev:当前分支合并dev分支，使用的Fast forward模式合并，看不出来曾经做过合并
git merge --no-ff -m 'merge with no-ff' dev:加上--no-ff参数就可以用普通模式合并，合并后的历史有分支
git log --graph --pretty=oneline --abbrev-commit:查看分支历史

Bug分支
1、隐藏分支工作区
git status:隐藏当前工作现场'储藏'起来，类似与隐藏工作区。
2、恢复分支工作区
git stash apply stash_id: 指定stash_id 恢复，stash内容并不删除，需要使用git status drop stash_id指定stash——id删除
git stash pop:恢复的同时把stash内容也删了


Feature分支
开发一个新feature，最好新建一个分支
git branch -D <name>: 删除一个未合并的分支


多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程master分支对应起来了，并且，远程仓库的默认名称是origin。
git remote: 查看远程仓库的名称
git remote -v : 查看远程仓库的详细信息
推送分支：
git push origin <name>: 推送本地分支到远程仓库。推送时要指定本地分支，这样，Git就会把该分支推送到远程仓库对应的远程分支上。
git pull:拉取远程仓库的最新提交
抓取分支：
多人协作工作模式：
1、首先，试图git push origin <branck-name>推送自己的修改
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull 视图合并
3、如果合并有冲突，则解决冲突，并在本地提交
4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功
若果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to=origin/<branch-name> <branch-name>





标签(tag)管理
tag就是一个让人容易记住的有意义的名字，他跟某个commit绑定在一起。
创建标签：
在Git中打标签非常简单，首先，切换到需要打标签的分支上
git tag <name>:打一个标签，默认是
git tag:查看所有标签


git remote rm <origin_name>: 删除远程仓库
一个本地库可以关联多个远程仓库
git pull <origin> <branch>:需要指定某个远程库和某个分支




























